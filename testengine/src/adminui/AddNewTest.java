/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package adminui;

import java.beans.PropertyVetoException;
import java.util.List;
import javax.swing.JOptionPane;
import operations.Validations;
import project.dao.SubjectInfoDAO;
import project.dao.TestInfoDAO;
import project.to.SubjectInfoTO;
import project.to.TestInfoTO;

/**
 *
 * @author HP
 */
public class AddNewTest extends javax.swing.JInternalFrame {

    private int testid;

    public AddNewTest() {
        initComponents();
        jcbSubID.removeAllItems();
        jcbTestLevel.removeAllItems();
        jcbSubID.addItem("Choose Any Subject ID");
        jcbTestLevel.addItem("Choose Test Level");
        List<SubjectInfoTO> subjectid = new SubjectInfoDAO().getAllRecord();
        if (subjectid != null && subjectid.size() > 0) {
            for (SubjectInfoTO sit : subjectid) {
                jcbSubID.addItem(sit);
            }
        }

        jcbTestLevel.addItem("Beginner");
        jcbTestLevel.addItem("Intermediate");
        jcbTestLevel.addItem("Advance");

    }

    public AddNewTest(TestInfoTO record) {
        this();
        if (record != null) {
            setTitle("Update Test Details");
            testid = record.getTestid();
            btnAddTest.setText("Update Test Details");
            jtfTestName.setText(record.getTestname());
            jtfDesc.setText(String.valueOf(record.getDescription()));
            jtfTotalQue.setText(String.valueOf(record.getTotalquestion()));
            for (int i = 1; i < jcbSubID.getItemCount(); i++) {
                SubjectInfoTO sit = (SubjectInfoTO) jcbSubID.getItemAt(i);
                if (sit.getSubjectid().equals(record.getSubjectid())) {
                    jcbSubID.setSelectedIndex(i);
                    break;
                }
            }
            for (int i = 1; i < jcbTestLevel.getItemCount(); i++) {
                String value = jcbTestLevel.getItemAt(i).toString();
                if (value.equalsIgnoreCase(record.getTestlevel())) {
                    jcbTestLevel.setSelectedIndex(i);
                    break;
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jcbSubjectID = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jtfDesc = new javax.swing.JTextField();
        jtfTotalQue = new javax.swing.JTextField();
        jtfTestName = new javax.swing.JTextField();
        btnAddTest = new javax.swing.JButton();
        jcbTestLevel = new javax.swing.JComboBox();
        jcbSubID = new javax.swing.JComboBox();

        jcbSubjectID.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        setClosable(true);
        setIconifiable(true);
        setTitle("Add New Test Details");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel2.setText("Enter Test Name:");

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel3.setText("Choose Subject ID:");

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel4.setText("Enter Total Question:");

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel5.setText("Choose Test Level :");

        jLabel6.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel6.setText("Enter Description:");

        jtfDesc.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        jtfTotalQue.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        jtfTestName.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        btnAddTest.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        btnAddTest.setText("Add New Test");
        btnAddTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddTestActionPerformed(evt);
            }
        });

        jcbTestLevel.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jcbSubID.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel4)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(32, 32, 32)
                                .addComponent(jLabel5)))
                        .addGap(41, 41, 41)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jtfTotalQue, javax.swing.GroupLayout.DEFAULT_SIZE, 367, Short.MAX_VALUE)
                            .addComponent(jtfTestName, javax.swing.GroupLayout.DEFAULT_SIZE, 367, Short.MAX_VALUE)
                            .addComponent(jtfDesc, javax.swing.GroupLayout.DEFAULT_SIZE, 367, Short.MAX_VALUE)
                            .addComponent(jcbTestLevel, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jcbSubID, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(94, 94, 94)
                        .addComponent(btnAddTest, javax.swing.GroupLayout.PREFERRED_SIZE, 492, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(41, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtfTestName, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jcbSubID, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jtfDesc, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jtfTotalQue, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jcbTestLevel, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnAddTest, javax.swing.GroupLayout.DEFAULT_SIZE, 56, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddTestActionPerformed
        String message = "";
        boolean allvalid = true;
        String testname = jtfTestName.getText().trim();
        String description = jtfDesc.getText().trim();
        String totalque = jtfTotalQue.getText().trim();
        if (Validations.isEmpty(testname)) {
            allvalid = false;
            message += "Please Fill Any Value in Test Name Box\n\n";
        } else if (!Validations.onlyCharacter(testname)) {
            allvalid = false;
            message += "Please Enter Character Value in Test Name Box\n\n";
        }
        if (jcbSubID.getSelectedIndex() == 0) {
            allvalid = false;
            message += "Please Choose Any Subject ID\n\n";
        }
        if (Validations.isEmpty(description)) {
            allvalid = false;
            message += "Please Fill Any Value in Description Box\n\n";
        } else if (!Validations.onlyCharacter(description)) {
            allvalid = false;
            message += "Please Enter Character Value in Description Box\n\n";
        }
        if (Validations.isEmpty(totalque)) {
            allvalid = false;
            message += "Please Fill Any Value in Total Question Box\n\n";
        } else if (Validations.onlyCharacter(totalque)) {
            allvalid = false;
            message += "Please Enter Numeric Value in Total Question Box\n\n";
        }
        if (jcbTestLevel.getSelectedIndex() == 0) {
            allvalid = false;
            message += "Please Choose Any Test Level\n\n";
        }
        if (allvalid) {
            TestInfoTO record = new TestInfoTO();
            SubjectInfoTO sit = (SubjectInfoTO) jcbSubID.getSelectedItem();
            String testlevel = jcbTestLevel.getSelectedItem().toString();
            record.setTestname(testname);
            record.setDescription(description);
            record.setTotalquestion(Integer.parseInt(totalque));
            record.setTestlevel(testlevel);
            record.setSubjectid(sit.getSubjectid());

            TestInfoDAO action = new TestInfoDAO();
            if (btnAddTest.getText().contains("Add")) {
                if (action.insertRecord(record)) {
                    message = "New Test Record is Added in System";
                } else {
                    if (action.getErrormessage().contains("key")) {
                        message = "Primary Key Failure\n\nAttempt for Duplicate Entry ";
                    } else {
                        message = "Insertion Failure Due TO " + action.getErrormessage();
                    }
                }
            } else {
                if (btnAddTest.getText().contains("Update")) {
                    record.setTestid(testid);
                    if (action.updateRecord(record)) {
                        message = "Test Record is Updated in System";
                    } else {
                        if (action.getErrormessage().contains("foreign")) {
                            message = "Foreign Key Failure\n\nAttempt to Update Primary Row ";
                        } else {
                            message = "Updation Failure Due TO " + action.getErrormessage();
                        }
                    }
                    ViewTestDetails vtd = new ViewTestDetails();
                    vtd.setVisible(true);
                    getDesktopPane().add(vtd);
                    try {
                        vtd.setSelected(true);
                    } catch (PropertyVetoException ex) {
                    }
                    dispose();
                }
            }
    }//GEN-LAST:event_btnAddTestActionPerformed
        JOptionPane.showMessageDialog(this, message);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddTest;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JComboBox jcbSubID;
    private javax.swing.JComboBox jcbSubjectID;
    private javax.swing.JComboBox jcbTestLevel;
    private javax.swing.JTextField jtfDesc;
    private javax.swing.JTextField jtfTestName;
    private javax.swing.JTextField jtfTotalQue;
    // End of variables declaration//GEN-END:variables
}
